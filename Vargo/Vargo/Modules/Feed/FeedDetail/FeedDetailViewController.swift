//
//  FeedDetailViewController.swift
//  Vargo
//
//  Created by Andre Souza on 22/10/2018.
//  Copyright (c) 2018 Andre Souza. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

enum FeedDetailLoadingType {
    
    case loading
    case error
    case success
    
    var labelText: String {
        switch self {
        case .loading:
            return "Loading..."
        case .error:
            return "Try again"
        case .success:
            return ""
        }
    }
    
}

final class FeedDetailViewController: UIViewController {
    
    @IBOutlet private weak var feedItemBookmarkButton: UIButton!
    @IBOutlet private weak var shareBarButtonItem: UIBarButtonItem!
    
    @IBOutlet private weak var feedItemImageView: VImageView!
    @IBOutlet private weak var feedItemPlayerButton: UIButton!
    
    @IBOutlet private weak var feedItemDateLabel: UILabel!
    
    @IBOutlet private weak var feedItemTitleLabel: UILabel!
    @IBOutlet private weak var feedItemDescriptionLabel: UILabel!
    
    @IBOutlet private weak var feedItemAuthorsTitleLabel: UILabel!
    @IBOutlet private weak var feedItemAuthorsLabel: UILabel!
    
    @IBOutlet private weak var feedItemFontTitleLabel: UILabel!
    @IBOutlet private weak var feedItemUrlButton: UIButton!
    
    @IBOutlet private weak var feedRelatedVideosContainerHeight: NSLayoutConstraint!
    @IBOutlet private weak var feedRelatedVideosContainerBottom: NSLayoutConstraint!
    @IBOutlet private weak var feedRelatedVideosContainer: UIView!
    @IBOutlet private weak var collectionView: UICollectionView! {
        didSet {
            setupCollectionView()
        }
    }
    
    @IBOutlet private weak var feedRelatedVideosLoadingView: UIView!
    @IBOutlet private weak var feedRelatedVideosLoadingLabel: UILabel!
    @IBOutlet private weak var feedRelatedVideosLoadingRetryButton: UIButton!
    @IBOutlet private weak var feedRelatedVideosLoadingActivityIndicator: UIActivityIndicatorView!

    // MARK: - Public properties -

    var presenter: FeedDetailPresenterInterface?
    var feedContent: FeedItemDetailInterface? {
        didSet {
            if isViewLoaded {
                showfeedContent()
            }
        }
    }

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        showfeedContent()
        setupAccessibility()
    }
    
    @IBAction func touchPlay(_ sender: Any) {
        presenter?.didPressPlay()
    }
    
    @IBAction func touchBookmark(_ sender: Any) {
        presenter?.didPressBookmark()
    }
    
    @IBAction func touchShare(_ sender: Any) {
        presenter?.didPressShare()
    }
    
    @IBAction func touchURL(_ sender: Any) {
        presenter?.didPressUrl()
    }
    
    @IBAction func touchRetry(_ sender: Any) {
        presenter?.loadRelatedVideos(feedContent?.relatedVideosPage)
    }
	
}

// MARK: - FeedDetailViewInterface -

extension FeedDetailViewController: FeedDetailViewInterface {
    
    func reloadData() {
        collectionView.reloadData()
    }
    
    func showfeedContent() {
        guard let feedContent = feedContent else {
            enableNavigationBarButtons(false)
            return
        }
        
        title = feedContent.screenTitle
        
        feedItemPlayerButton.isHidden = !feedContent.isVideo
        
        feedItemDateLabel.text = feedContent.date
        
        if let urlString = feedContent.imageURL, let url = URL(string: urlString) {
            feedItemImageView.af_setImage(withURL: url, placeholderImage: UIImage(named: "ic_place_holder"))
        } else {
            feedItemImageView.image = UIImage(named: "ic_place_holder")
        }
        
        feedItemTitleLabel.text = feedContent.title
        feedItemDescriptionLabel.text = feedContent.description
        
        feedItemAuthorsTitleLabel.text = feedContent.authorTitle
        feedItemAuthorsLabel.text = feedContent.author
        
        feedItemFontTitleLabel.text = feedContent.urlTitle
        
        if let urlDescription = feedContent.urlDescription {
            feedItemUrlButton.isHidden = false
            let attText = NSMutableAttributedString(string: urlDescription, attributes: [.underlineStyle: NSUnderlineStyle.single.rawValue])
            feedItemUrlButton.setAttributedTitle(attText, for: .normal)
        } else {
            feedItemUrlButton.isHidden = true
        }
        
        enableNavigationBarButtons(true)
        
        hideRelatedVideosContainer()
        
        if feedContent.isVideo {
            showWaitingView(with: .loading)
            let deadline = DispatchTime.now() + 0.3
            DispatchQueue.main.asyncAfter(deadline: deadline) { [weak self] in
                self?.showRelatedVideosContainer(animating: true)
            }
        }
    }
    
    func showWaitingView(with type: FeedDetailLoadingType) {
        switch type {
        case .loading:
            feedRelatedVideosLoadingLabel.text = type.labelText
            feedRelatedVideosLoadingView.isHidden = false
            feedRelatedVideosLoadingLabel.isHidden = false
            feedRelatedVideosLoadingRetryButton.isHidden = true
            feedRelatedVideosLoadingActivityIndicator.isHidden = false
        case .error:
            feedRelatedVideosLoadingLabel.text = type.labelText
            feedRelatedVideosLoadingView.isHidden = false
            feedRelatedVideosLoadingLabel.isHidden = false
            feedRelatedVideosLoadingRetryButton.isHidden = false
            feedRelatedVideosLoadingActivityIndicator.isHidden = true
        case .success:
            feedRelatedVideosLoadingView.isHidden = true
        }
    }
    
    func scrollCollectionToFirstItem() {
        collectionView.contentOffset.x = 0
    }
    
    func showRelatedVideosContainer(animating: Bool) {
        if animating {
            UIView.animate(withDuration: 0.6,
                           delay: 0.4, usingSpringWithDamping: 1.0,
                           initialSpringVelocity: 1.0,
                           options: [.curveEaseInOut], animations: {
                            
                            self.feedRelatedVideosContainer.isHidden = false
                            self.feedRelatedVideosContainerBottom.constant = 0
                            self.view.layoutIfNeeded()
                            
            }, completion: { (Bool) -> Void in
                self.presenter?.loadRelatedVideos(self.feedContent?.relatedVideosPage)
            })
        } else {
            self.feedRelatedVideosContainerBottom.constant = 0
        }
    }
    
}

// MARK: - Extensions -

extension FeedDetailViewController {
    
    private func setupCollectionView() {
        collectionView.register(FeedRelatedVideoCollectionViewCell.self)
        collectionView.dataSource = self
        collectionView.delegate = self
    }
    
    private func enableNavigationBarButtons(_ enable: Bool) {
        navigationItem.rightBarButtonItems?.forEach() { $0.isEnabled = enable }
    }
    
    private func hideRelatedVideosContainer() {
        feedRelatedVideosContainerBottom.constant = feedRelatedVideosContainerHeight.constant
        feedRelatedVideosContainer.isHidden = true
    }
    
    //Tests
    private func setupAccessibility() {
        shareBarButtonItem.accessibilityIdentifier = "shareBarButtonItem"
        feedItemUrlButton.accessibilityIdentifier = "feedUrlButton"
        feedItemPlayerButton.accessibilityIdentifier = "feedDetailPlayerButton"
    }
    
}


// MARK: - UICollectionViewDelegate

extension FeedDetailViewController: UICollectionViewDelegate {
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        presenter?.didSelectItem(at: indexPath)
    }
    
}

// MARK: - UICollectionViewDataSource

extension FeedDetailViewController: UICollectionViewDataSource {
    
    public func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return presenter?.numberOfItems() ?? 0
    }
    
    public func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(forIndexPath: indexPath) as FeedRelatedVideoCollectionViewCell
        cell.item = presenter?.item(at: indexPath)
        return cell
    }
    
}

// MARK: - UICollectionViewDelegateFlowLayout

extension FeedDetailViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: 200, height: 110)
    }
    
}
