//
//  FeedDetailPresenter.swift
//  Vargo
//
//  Created by Andre Souza on 22/10/2018.
//  Copyright (c) 2018 Andre Souza. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import AVKit
import SafariServices

final class FeedDetailPresenter {

    // MARK: - Private properties -

    private unowned var _view: FeedDetailViewInterface
    private var _interactor: FeedDetailInteractorInterface
    private var _wireframe: FeedDetailWireframeInterface
    
    private var _feedRelatedVideos: [FeedContent] = []

    // MARK: - Lifecycle -

    init(wireframe: FeedDetailWireframeInterface, view: FeedDetailViewInterface, interactor: FeedDetailInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - FeedDetailPresenterInterface -

extension FeedDetailPresenter: FeedDetailPresenterInterface {
    
    func didPressPlay() {
        guard let urlString = _view.feedContent?.url, let urlToOpen = URL(string: urlString) else {
            _wireframe.showSimpleAlert(message: "Couldn't play the video.")
            return
        }
        let player = AVPlayer(url: urlToOpen)
        let playerViewController = AVPlayerViewController()
        playerViewController.player = player
        playerViewController.player?.play()
        _wireframe.show(playerViewController, with: .present, animated: true)
    }
    
    func didPressShare() {
        let title = _view.feedContent?.title ?? ""
        var activityItems: [Any] = [title]
        if let urlString = _view.feedContent?.url, let url = URL(string: urlString) {
            activityItems.append(url)
        }
        
        let activityViewController = UIActivityViewController(activityItems: activityItems, applicationActivities: nil)
        _wireframe.show(activityViewController, with: .present, animated: true)
    }
    
    func didPressBookmark() {
        //Aqui entraria um request POST porém este projeto é apenas utiliza um serviço mock
    }
    
    func didPressUrl() {
        guard let urlString = _view.feedContent?.url, let urlToOpen = URL(string: urlString) else { return }
        let safariVC = SFSafariViewController(url: urlToOpen)
        safariVC.dismissButtonStyle = .close
        safariVC.preferredBarTintColor = .mainColor
        safariVC.preferredControlTintColor = .black
        safariVC.modalPresentationStyle = .overFullScreen
        _wireframe.show(safariVC, with: .present, animated: true)
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOfItems() -> Int {
        return _feedRelatedVideos.count
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        guard let feedContent = _feedRelatedVideos[safeIndex: indexPath.item] else { return }
        _view.feedContent = feedContent
    }
    
    func item(at indexPath: IndexPath) -> FeedItemDetailInterface? {
        return _feedRelatedVideos[safeIndex: indexPath.item]
    }
    
    func loadRelatedVideos(_ relatedVideosPage: Int?) {
        _feedRelatedVideos = []
        _view.showWaitingView(with: .loading)
        if let page = relatedVideosPage {
            _interactor.getRelatedVideos(page: page)
        }
    }
    
}

// MARK: - FeedDetailPresenterInteractorInterface

extension FeedDetailPresenter: FeedDetailPresenterInteractorInterface {
    
    func requestSuccess(_ feed: [FeedContent]) {
        _feedRelatedVideos = feed
        _view.showWaitingView(with: .success)
        _view.reloadData()
        _view.scrollCollectionToFirstItem()
    }
    
    func requestFailed(_ error: ErrorResponse) {
        _view.showWaitingView(with: .error)
    }
    
}
